// Querying data

// works 1. All books by an author

db.books.find({ "authors.first_name": "Isaac", "authors.last_name": "Asimov" });

// works 2. Total price of an order

db.orders.find(
  { _id: ObjectId("65f8cc7b6e79a8d91d3fab12") }, 
  { total_price: 1, _id: 0 }
);


// works 3. Total sales (in £) to a customer

db.orders.aggregate([
  { $match: { customer_id: ObjectId("67e029ae688b6ef4cf9cad0a") } },
  { $group: { _id: "$customer_id", total_sales: { $sum: "$total_price" } } },
]);

// works 4. Books that are categorized as neither science fiction nor fantasy  (Note: This is harder than you think. A book can have more categories. Make sure you don’t return books that are fantasy romance, for instance.)

db.books.find({
  "categories.title": { $nin: ["Science Fiction", "Fantasy"] },
});

// works 5. Average page count by genre

db.books.aggregate([
  { $unwind: "$genres" },
  { $group: { _id: "$genres", avg_page_count: { $avg: "$page_count" } } },
]);

// works 6. Categories that have no sub-categories

db.categories.find({ sub_categories: { $exists: true, $size: 0 } });

// works 7. ISBN numbers of books with more than one author

db.books.find(
  { "authors.1": { $exists: true } },
  { asin: 1, _id: 0 }
);

// works 8. ISBN numbers of books that sold at least X copies (you decide the value for X)

db.books.find({ sold_copies: { $gte: 100 } }, { asin: 1, _id: 0 });


// works 9. Number of copies of each book sold – unsold books should show as 0 sold copies.

db.books.aggregate([
  {
    $project: {
      title: 1,
      sold_copies: { $ifNull: ["$sold_copies", 0] } 
    }
  }
]);

// works 10. Best-selling books: The top 10 selling books ordered in descending order by number of sales.

db.books.find().sort({ sold_copies: -1 }).limit(10);

// works 11. Best-selling genres: The top 3 selling genres ordered in descending order by number of sales.

db.books.find({}, { title: 1, sold_copies: 1 }) 
  .sort({ sold_copies: -1 }) 
  .limit(3);

// Note: In the next three exercises, subcategories of Mystery also count as Mystery, and so do subcategories of subcategories, and so on. 
// It’s not enough to just look for the Mystery category.

// works 12. All Mystery books. Note: Books in Mystery subcategories like "Cozy Mystery" also count as Mystery.
//  Don’t use your knowledge of the concrete category structure. (Depending on the model you might want to use $graphLookup)

var mysteryCategory = db.categories.findOne({ title: "Mystery" });

db.books.aggregate([
  {
    $match: {
      "categories.category_id": { 
        $in: [mysteryCategory._id] 
      },
    },
  },
  {
    $graphLookup: {
      from: "categories", 
      startWith: "$categories.category_id", 
      connectFromField: "category_id", 
      connectToField: "_id", 
      as: "all_mystery_categories", 
      maxDepth: 0, 
      depthField: "depth", 
    },
  },
  {
    $unwind: "$all_mystery_categories", 
  },
  {
    $match: {
      "all_mystery_categories.title": { $in: ["Mystery"] }, 
    },
  },
  {
    $project: {
      asin: 1, 
      title: 1, 
      _id: 0, 
    },
  },
]);


// works 13. Characters used in Mystery books.

var mysteryCategory = db.categories.findOne({ title: "Mystery" });

db.books.aggregate([
  {
    $match: {
      "categories.category_id": { 
        $in: [mysteryCategory._id] 
      },
    },
  },
  {
    $graphLookup: {
      from: "categories",
      startWith: "$categories.category_id",
      connectFromField: "category_id",
      connectToField: "_id",
      as: "all_mystery_categories",
      maxDepth: 0,
      depthField: "depth",
    },
  },
  {
    $unwind: "$all_mystery_categories",
  },
  {
    $match: {
      "all_mystery_categories.title": { $in: ["Mystery"] },
    },
  },
  {
    $project: {
      characters: 1,
      _id: 0,
    },
  },
]);


// works 14. For each category: Number of books in the category including books in its subcategories.

db.categories.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "_id",
      foreignField: "categories.category_id",
      as: "books",
    },
  },
  {
    $project: {
      title: 1,
      book_count: { $size: "$books" },
    },
  },
]);
