// Modifying data

// works 1. Sell a book to a customer.

// const session = db.getMongo().startSession();
const ordersCollection = db.orders;
const customersCollection = db.customers;
const booksCollection = db.books;

try {
  session.startTransaction();

  const orderResult = ordersCollection.insertOne(
    {
      customer_id: ObjectId("67e029ae688b6ef4cf9cad0a"), 
      date: new Date(),
      order_details: [
        {
          book_id: ObjectId("67e027bf688b6ef4cf9cad11"),  
          quantity: 1,
          price: NumberDecimal("59.99"), 
        },
      ],
      total_price: NumberDecimal("59.99"),
    },
    { session }
  );

  const orderId = orderResult.insertedId;

  customersCollection.updateOne(
    { _id: ObjectId("67e029ae688b6ef4cf9cad0a") },
    { 
      $push: { 
        orders: {
          order_id: orderId,
          total_price: NumberDecimal("59.99")
        }
      }
    },
    { session }
  );

  booksCollection.updateOne(
    { _id: ObjectId("67e027bf688b6ef4cf9cad11") },
    {
      $inc: {
        no_of_copies: -1,   
        sold_copies: 1      
      }
    },
    { session }
  );

  session.commitTransaction();
} catch (error) {
  session.abortTransaction();
  throw error;
} finally {
  session.endSession();
}



// works 2. Change the address of a customer.

db.customers.updateOne(
  { email: "alice@example.com" },
  { $set: { "address.country": "Poland" } }
);

// works 3. Add an author to a book.

db.books.update(
  { asin: "B0001A1B2C" },
  { $push: { authors: { first_name: "Johnathan", last_name: "DoeExtraAuthor" } } }
);

// 4. Retire the "Space Opera" category and assign all books from that category to the parent category. Don't assume you know the id of the parent category.

const session = db.getMongo().startSession();
session.startTransaction();

try {
  const db = session.getDatabase("amazon_bookstore_mongov2");
  // Step 1: Find the "Space Opera" category
  var spaceOpera = db.categories.findOne({ title: "Space Opera" });

  if (!spaceOpera) {
    throw new Error("Space Opera category not found");
  }

  // Step 2: Find the parent category
  var parentCategory = db.categories.findOne({ _id: spaceOpera.parent_id });

  if (!parentCategory) {
    throw new Error("Parent category not found");
  }

  // Step 3: Update books to replace "Space Opera" with its parent category
  db.books.updateMany(
    { "categories.category_id": spaceOpera._id },
    { $set: { "categories.$.category_id": parentCategory._id } }
  );

  // Step 4: Delete the "Space Opera" category
  db.categories.deleteOne({ _id: spaceOpera._id });

  // Step 5: Commit the transaction
  session.commitTransaction();
  print("Transaction committed successfully!");
} catch (error) {
  // If anything fails, abort the transaction
  session.abortTransaction();
  print("Transaction aborted: " + error.message);
} finally {
  session.endSession();
}

// 5. Sell 3 copies of one book and 2 of another in a single order

// const session = db.getMongo().startSession();
// const ordersCollection = db.orders;
// const customersCollection = db.customers;
// const booksCollection = db.books;

try {
  session.startTransaction();

  const orderResult = ordersCollection.insertOne(
    {
      customer_id: ObjectId("67e029ae688b6ef4cf9cad0a"), 
      date: new Date(),
      order_details: [
        {
          book_id: ObjectId("67e027bf688b6ef4cf9cad11"),  
          quantity: 3,
          price: NumberDecimal("59.99"), 
        },
        {
          book_id: ObjectId("67e027bf688b6ef4cf9cad07"),  
          quantity: 2,
          price: NumberDecimal("19.99"),
        }
      ],
      total_price: NumberDecimal("59.99 * 3 + 19.99 * 2"), 
    },
    { session }
  );

  const orderId = orderResult.insertedId;

  customersCollection.updateOne(
    { _id: ObjectId("67e029ae688b6ef4cf9cad0a") },
    { 
      $push: { 
        orders: {
          order_id: orderId,
          total_price: NumberDecimal("59.99 * 3 + 19.99 * 2") 
        }
      }
    },
    { session }
  );

  booksCollection.updateOne(
    { _id: ObjectId("67e027bf688b6ef4cf9cad11") },
    {
      $inc: {
        no_of_copies: -3,   
        sold_copies: 3      
      }
    },
    { session }
  );

  booksCollection.updateOne(
    { _id: ObjectId("67e027bf688b6ef4cf9cad07") },
    {
      $inc: {
        no_of_copies: -2,   
        sold_copies: 2      
      }
    },
    { session }
  );

  session.commitTransaction();
} catch (error) {
  session.abortTransaction();
  throw error;
} finally {
  session.endSession();
}

